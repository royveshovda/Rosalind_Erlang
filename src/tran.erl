-module(tran).
-export([test/0, run/0]).

run() ->
	S1_Raw = "GCTCACCCGGATCTTTCGTATAGCTTATTATCCTAGTCCTATCCCCTTGATGGCCTCATGGCTTCGTCTGAAGAAGGCAGCAGGCACTTTGCTGAGGGATGCCGATGAAGCCCATGGGGGGTACTTGTCGAGCCGGACAGGCGCCATTATCGGACCCACGATATTGGCTGTTCCTAGTCGATGAAAGCCACCATTTACCGTATTAGTTGGAAAAAGGCCACTTCCGGAGCGATTGGTCCTTAGTGACTACCGTCTTAAAGAGTCATATGTTCGTAGCTCAAACTTGCATGGCGCTTCGTCCCCGCATAAAGTGTCTGATCTCCAAGTCATCTAACCACCAAGTGTCCCCATGATCTCTTGGCAGGTAGATCTCTAGAGCCGTTGCCGAGGTATCCGAGGGAGCCTATGACATACAGCAGTTGGCCTCCTATCAGACTGACGGATAAGGCTGCCAATTCCTAATCAAATTGTAAGAGGCTTTGGCCGCGAAAGGTACGTGCGTACTTCGGCCACATGTACTCGGACATCATCACTTCCGGTAATGCTTCATAACGTGGACGCGGTCCCCGGAGTCAGCGCACCCAATTAGAAGTACTTCATAGATCCTTCAAGTATACCACCGACGCATCTTACGTGGCATATATTATTTGTACTCCCGTTCATGCCAATCGCTGTCGATCAACCTGAAAAGCGCCTGGTATTTTACGTTCCGTTACTGCTATGGAATAACATACCCACTCGTGTTAAGGTTGGGGTAGCGTTCCGTGAAATTTGTATAAGTCTGTAGTTTACTACTATAAAATTATCACGGGGGGCCTCCAGCGGAGTACCCGCCAGGTCTTCTGATCAAGCTATTATATCGCGCCTCGGATGGTCACGTCGACCGAGGACTCGTAAATCCGTCCCACAATCCGAACACTTCGACACTGGTTGCCATCTGCTGGAATGCGCGACTCATGAGGACA",
	S2_Raw = "GGTCACTCGGGCTATTCGTATAGCTCGGTCACATAGTCATGCCCCACTCACGAATCCCTGGCCTCATCAGCACGAGACTGCAGATGTATAGCTCAGGGATGCCGATCGGGACCATGGGGGGAACTTGTGGAGCTCAGTAGACGACGTTACTGGATTGACGAGGTTGGCTGCCCTAAGTCGATGACAACTGTCAGCTACCGCACTAGTTGCAGAAAACCCACTTCCGAAACGAACGATCCTGAATGATTAACGTTTTAAAGAGTCATGTGTCCGTAGCTCGAGTCTGTGTGACGCTTCGTCCCCTTACAAAGTGTCTGACTTTTACGTCATCCAACCACCAGTCGTCCCCACAAACTCTCGACAGGCAAACCCTTAGAGCCGCTGCCAAGCTATCCAAAGGGGTTTATGGTATAAAACAGATGGTTTCTTACCAGACTGACGGATGGAACTAACGATTCCTAACCCGATTGTGTGAGACTGTGGCCACGGAGAGCATACGCATGCCTTGGCCATATGTAATCGAATAACGTCACTTTAAGCAATACTCTATAAAGCAAATTTGGTCCCCAGAGTCAGTGCGCCCAATGGAAAGTGCCCGATAGAGCCCGCGACTATGGTACCGACGCATTTTGAGTGGCATATATCCCTTGGACCTCCGTTCAGGTCAACAGCTGTCGAACAGACCGATAAGCGCCTGGTATCTTGCATTCCGTTACTACTGCAGAATACCACACCAGCTTGTGTGGAAATCGGGATGGCGTTAGGTGAGATTTATAGAGTTCGACGACTTAGTAATATAAGATTACGACAGGGCTCTCCCGGCGAAGTATACGCCTAATCTTGTGATTAAGCTATTAATTCACCCCTCGGAGGCTGACGTCGGCCGAATAAGTGTAATTTTGTATCACAAGTCAGGCATTGCGGCTCTAGTTGCCATCGGCTAGAATGCACGTCTCATCGGTACG",
	S1 = convert:string_to_dna(S1_Raw),
	S2 = convert:string_to_dna(S2_Raw),
	calculate_transition_transversion_ratio(S1, S2).

test() ->
	S1_Raw = "GCAACGCACAACGAAAACCCTTAGGGACTGGATTATTTCGTGATCGTTGTAGTTATTGGAAGTACGGGCATCAACCCAGTT",
	S2_Raw = "TTATCTGACAAAGAAAGCCGTCAACGGCTGGATAATTTCGCGATCGTGCTGGTTACTGGCGGTACGAGTGTTCCTTTGGGT",
	S1 = convert:string_to_dna(S1_Raw),
	S2 = convert:string_to_dna(S2_Raw),
	1.2142857142857142 = calculate_transition_transversion_ratio(S1, S2),
	perfect.


calculate_transition_transversion_ratio(Dna1, Dna2) when length(Dna1) =:= length(Dna2) ->
	calculate_transition_transversion_ratio(Dna1, Dna2, 0, 0).

calculate_transition_transversion_ratio([], [], Transitions, Transversions) ->
	Transitions / Transversions;
calculate_transition_transversion_ratio([_Dna | RestOfDna1], [_Dna | RestOfDna2], Transitions, Transversions) ->
	calculate_transition_transversion_ratio(RestOfDna1, RestOfDna2, Transitions, Transversions);
calculate_transition_transversion_ratio([Dna1 | RestOfDna1], [Dna2 | RestOfDna2], Transitions, Transversions) ->
	case is_transition(Dna1, Dna2) of
		true ->
			calculate_transition_transversion_ratio(RestOfDna1, RestOfDna2, Transitions+1, Transversions);
		false ->
			calculate_transition_transversion_ratio(RestOfDna1, RestOfDna2, Transitions, Transversions+1)
	end.


is_transition(_Dna, _Dna) ->
	true;

is_transition(dna_a, dna_g) ->
	true;
is_transition(dna_a, _) ->
	false;

is_transition(dna_g, dna_a) ->
	true;
is_transition(dna_g, _) ->
	false;

is_transition(dna_c, dna_t) ->
	true;
is_transition(dna_c, _) ->
	false;

is_transition(dna_t, dna_c) ->
	true;
is_transition(dna_t, _) ->
	false.